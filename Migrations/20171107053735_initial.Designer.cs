// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using NightQL.Data;
using System;

namespace NightQL.Migrations
{
    [DbContext(typeof(ConfigContext))]
    [Migration("20171107053735_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NightQL.Data.DbEntities.DbChange", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Backward")
                        .HasMaxLength(4000);

                    b.Property<string>("Forward")
                        .HasMaxLength(4000);

                    b.Property<int?>("SchemaID");

                    b.HasKey("ID");

                    b.HasIndex("SchemaID");

                    b.ToTable("DbChange");
                });

            modelBuilder.Entity("NightQL.Data.DbEntities.DbEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("Guid");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("SchemaID");

                    b.HasKey("ID");

                    b.HasIndex("SchemaID");

                    b.ToTable("DbEntity");
                });

            modelBuilder.Entity("NightQL.Data.DbEntities.DbLink", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ChildID");

                    b.Property<long?>("ParentID");

                    b.Property<int?>("RelationshipID");

                    b.HasKey("ID");

                    b.HasIndex("ChildID");

                    b.HasIndex("ParentID");

                    b.HasIndex("RelationshipID");

                    b.ToTable("DbLink");
                });

            modelBuilder.Entity("NightQL.Data.DbEntities.DbPermission", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CreateAccess");

                    b.Property<string>("Entity")
                        .HasMaxLength(128);

                    b.Property<bool>("ReadAccess");

                    b.Property<string>("SchemaName")
                        .HasMaxLength(128);

                    b.Property<int?>("UserID");

                    b.Property<bool>("WriteAccess");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("NightQL.Data.DbEntities.DbRelationship", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChildAlias")
                        .HasMaxLength(128);

                    b.Property<string>("ChildEntity")
                        .HasMaxLength(128);

                    b.Property<bool>("ChildRequiresParent");

                    b.Property<string>("ParentAlias")
                        .HasMaxLength(128);

                    b.Property<string>("ParentEntity")
                        .HasMaxLength(128);

                    b.HasKey("ID");

                    b.ToTable("DbRelationship");
                });

            modelBuilder.Entity("NightQL.Data.DbEntities.DbSchema", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("DbSchema");
                });

            modelBuilder.Entity("NightQL.Data.DbEntities.DbUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(128);

                    b.Property<string>("Secret")
                        .HasMaxLength(128);

                    b.HasKey("ID");

                    b.ToTable("DbUser");
                });

            modelBuilder.Entity("NightQL.Data.DbEntities.DbChange", b =>
                {
                    b.HasOne("NightQL.Data.DbEntities.DbSchema", "Schema")
                        .WithMany()
                        .HasForeignKey("SchemaID");
                });

            modelBuilder.Entity("NightQL.Data.DbEntities.DbEntity", b =>
                {
                    b.HasOne("NightQL.Data.DbEntities.DbSchema", "Schema")
                        .WithMany()
                        .HasForeignKey("SchemaID");
                });

            modelBuilder.Entity("NightQL.Data.DbEntities.DbLink", b =>
                {
                    b.HasOne("NightQL.Data.DbEntities.DbEntity", "Child")
                        .WithMany()
                        .HasForeignKey("ChildID");

                    b.HasOne("NightQL.Data.DbEntities.DbEntity", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.HasOne("NightQL.Data.DbEntities.DbRelationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipID");
                });

            modelBuilder.Entity("NightQL.Data.DbEntities.DbPermission", b =>
                {
                    b.HasOne("NightQL.Data.DbEntities.DbUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
